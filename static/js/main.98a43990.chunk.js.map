{"version":3,"sources":["MapContainer.js","Layout.js","index.js"],"names":["mapStyles","width","height","MapContainer","state","showingInfoWindow","activeMarker","selectedPlace","places","center","lat","lng","onMarkerClick","props","marker","e","setState","onClose","displayMarkers","map","store","index","key","id","position","latitude","longitude","searchterm","fetch","then","navigator","geolocation","getCurrentPosition","pos","coords","this","getPlaces","craving","google","style","zoom","onClick","name","color","visible","Component","GoogleApiWrapper","apiKey","Layout","type","ripple","onPress","console","log","className","Button","ReactDOM","render","document","getElementById"],"mappings":"gRASMA,G,MAAY,CAChBC,MAAO,QACPC,OAAQ,UAGJC,E,2MACJC,MAAQ,CACNC,mBAAmB,EACnBC,aAAc,GACdC,cAAe,GACfC,OAAQ,KACRC,OAAQ,CAACC,IAAK,KAAMC,IAAK,O,EA4C3BC,cAAgB,SAACC,EAAOC,EAAQC,GAAhB,OAChB,EAAKC,SAAS,CACZT,cAAeM,EACfP,aAAcQ,EACdT,mBAAmB,K,EAGrBY,QAAU,SAAAJ,GACJ,EAAKT,MAAMC,mBACb,EAAKW,SAAS,CACZX,mBAAmB,EACnBC,aAAc,Q,EAKpBY,eAAiB,WACf,OAAQ,EAAKd,MAAMI,OAAOW,KAAI,SAACC,EAAOC,GACpC,OACE,kBAAC,SAAD,CACAC,IAAKD,EACLE,GAAIF,EACJG,SAAU,CACTd,IAAKU,EAAMK,SACXd,IAAKS,EAAMM,iB,yEAzDRC,GAAa,IAAD,OACpBC,MAAM,2BACHC,MAAK,SAAArB,GAAM,OAAI,EAAKQ,SAAS,CAAER,gB,0CA6Df,IAAD,OAClBsB,UAAUC,YAAYC,oBAAmB,SAAAC,GACrC,IAAMC,EAASD,EAAIC,OACnB,EAAKlB,SAAS,CACZP,OAAQ,CACNC,IAAKwB,EAAOT,SACZd,IAAKuB,EAAOR,kB,+BAQpB,OADAS,KAAKC,UAAUD,KAAKtB,MAAMwB,SAExB,6BACE,kBAAC,MAAD,CACEC,OAAQH,KAAKtB,MAAMyB,OACnB7B,OAAQ0B,KAAK/B,MAAMK,OACnB8B,MAAOvC,EACPwC,KAAM,IAEN,kBAAC,SAAD,CACEjB,GAAI,gBACJkB,QAASN,KAAKvB,cACd8B,KAAM,eACNlB,SAAUW,KAAK/B,MAAMK,OACrBkC,MAAM,SAGR,kBAAC,aAAD,CACE7B,OAAQqB,KAAK/B,MAAME,aACnBsC,QAAST,KAAK/B,MAAMC,kBACpBY,QAASkB,KAAKlB,SAEhB,6BACE,4BAAKkB,KAAK/B,MAAMG,cAAcmC,c,GApHfG,aA6HZC,6BAAiB,CAC9BC,OAAQ,2CADKD,CAEZ3C,G,QCtFY6C,E,YA3Cb,WAAYnC,GAAQ,IAAD,8BACjB,4CAAMA,KACDT,MAAQ,CAACuB,WAAY,MAFT,E,oEAKZU,GAAU,IAAD,OACd,OACE,kBAAC,gBAAD,CACEY,KAAK,UACLC,QAAM,EACNC,QAAS,WACP,EAAKnC,SAAS,CAACW,WAAYU,IAC3Be,QAAQC,IAAIhB,EAAU,mCAEvBA,K,+BAML,OACI,kBAAC,MAAD,CAAKd,GAAG,UACN,kBAAC,SAAD,CAAQgB,MAAO,CAAC,MAAU,QACxB,yBAAKhB,GAAG,WACN,yBAAK+B,UAAU,UAAU,yBACxBnB,KAAKoB,OAAO,UACZpB,KAAKoB,OAAO,OACZpB,KAAKoB,OAAO,cACZpB,KAAKoB,OAAO,gBACZpB,KAAKoB,OAAO,eAGjB,kBAAC,SAAD,CAAQhB,MAAO,CAAC,MAAU,QACxB,kBAAC,EAAD,CACAF,QAASF,KAAK/B,MAAMuB,mB,GAnCXkB,aCHrBW,IAASC,OACP,kBAAC,EAAD,CAAQH,UAAU,WAClBI,SAASC,eAAe,W","file":"static/js/main.98a43990.chunk.js","sourcesContent":["//map layout\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper, Marker, InfoWindow } from 'google-maps-react';\nimport axios from 'axios';\nimport './index.css';\n// import { yelp } from 'yelp-fusion';\n// maps api key 'AIzaSyC-FNgVzK38CFoYC6E4-olIUu418f90H2I'\n// yelp api key 'TQl-ldodqDuIn-Wi3xJ5xkB-nsuPgeUvlti5NCOhIJPKTssK0BA5EjYWnwasmMSca20hq1UxyNSYPLL1c1URFMrztx4w9VfRXcOiP8f0XlWgSxZMRvIKQYlO6htPXnYx'\n\nconst mapStyles = {\n  width: '68.7%',\n  height: '97.2%'\n};\n\nclass MapContainer extends Component {\n  state = {\n    showingInfoWindow: false,  //Hides or the shows the infoWindow\n    activeMarker: {},          //Shows the active marker upon click\n    selectedPlace: {},          //Shows the infoWindow to the selected place upon a marker\n    places: null,\n    center: {lat: null, lng: null}\n  };\n\n  // constructor(props) {\n  //   super(props);\n  //     this.state = {\n  //       center: [{latitude: 44.0377, longitude: -90.5477}],\n  //       places: [{latitude: 47.9, longitude: -122.14}]\n  //     };\n  // }\n\n  getPlaces(searchterm) {\n    fetch('../server/routes/search')\n      .then(places => this.setState({ places })\n    )\n  };\n\n\n\n\n    // const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n    // const url = 'https://api.yelp.com/v3/businesses/search';\n    // const testParameters = '?term=ice+cream&latitude=43.071&longitude=-89.398&radius=10000';\n    // axios.get(url + testParameters, config)\n    //   .then(response => {\n    //     this.setState({ places: response.data });\n    //     console.log(response)\n    //   });\n\n    // 'use strict';\n    //\n    // const yelp = require('yelp-fusion');\n    // const client = yelp.client('AIzaSyC-FNgVzK38CFoYC6E4-olIUu418f90H2I');\n    //\n    // client.search({\n    //   term: 'Four Barrel Coffee',\n    //   location: 'san francisco, ca',\n    // }).then(response => {\n    //   console.log(response.jsonBody.businesses[0].name);\n    // }).catch(e => {\n    //   console.log(e);\n    // });\n    //}\n\n  onMarkerClick = (props, marker, e) =>\n  this.setState({\n    selectedPlace: props,\n    activeMarker: marker,\n    showingInfoWindow: true\n  });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  displayMarkers = () => {\n    return (this.state.places.map((store, index) => {\n      return (\n        <Marker\n        key={index}\n        id={index}\n        position={{\n         lat: store.latitude,\n         lng: store.longitude\n       }}/>\n      );\n   }));\n  }\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition(pos => {\n        const coords = pos.coords\n        this.setState({\n          center: {\n            lat: coords.latitude,\n            lng: coords.longitude\n          }\n        });\n    })\n  }\n\n  render() {\n    this.getPlaces(this.props.craving)\n    return (\n      <div>\n        <Map\n          google={this.props.google}\n          center={this.state.center}\n          style={mapStyles}\n          zoom={13}\n        >\n          <Marker\n            id={'user-location'}\n            onClick={this.onMarkerClick}\n            name={'You are here'}\n            position={this.state.center}\n            color=\"blue\"\n          />\n\n          <InfoWindow\n            marker={this.state.activeMarker}\n            visible={this.state.showingInfoWindow}\n            onClose={this.onClose}\n          >\n          <div>\n            <h4>{this.state.selectedPlace.name}</h4>\n          </div>\n          </InfoWindow>\n        </Map>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyC-FNgVzK38CFoYC6E4-olIUu418f90H2I'\n})(MapContainer);\n","import React, { Component } from \"react\";\n//import ReactDOM from 'react-dom';\nimport AwesomeButtonStyles from \"react-awesome-button/src/styles/styles.scss\";\nimport { AwesomeButton } from \"react-awesome-button\";\nimport MapContainer from './MapContainer'\nimport './index.css';\n\nimport { Column, Row } from \"simple-flexbox\";\n\n\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {searchterm: null};\n  }\n\n  Button(craving) {\n    return (\n      <AwesomeButton\n        type=\"primary\"\n        ripple\n        onPress={() => {\n          this.setState({searchterm: craving})\n          console.log(craving + 'button pressed and state set!')\n        }}>\n        {craving}\n      </AwesomeButton>\n    );\n  }\n\n  render() {\n    return (\n        <Row id=\"layout\">\n          <Column style={{\"width\" : \"30%\"}}>\n            <div id=\"options\">\n              <div className=\"prompt\">{'What are you craving?'}</div>\n              {this.Button('Coffee')}\n              {this.Button('Tea')}\n              {this.Button('Bubble Tea')}\n              {this.Button('Cheese Curds')}\n              {this.Button('Ice Cream')}\n            </div>\n          </Column>\n          <Column style={{\"width\" : \"70%\"}}>\n            <MapContainer\n            craving={this.state.searchterm}>\n            </MapContainer>\n          </Column>\n        </Row>\n    );\n  }\n}\n\n\nexport default Layout\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Layout from './Layout'\n// import {BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n\n\nReactDOM.render(\n  <Layout className=\"layout\"/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}