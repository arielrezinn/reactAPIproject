{"ast":null,"code":"var _jsxFileName = \"/Users/arielrezin/CSprojects/reactAPIproject/src/Map.js\";\n//map layout\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nimport { geolocated } from \"react-geolocated\";\nimport './index.css'; // my key 'AIzaSyC-FNgVzK38CFoYC6E4-olIUu418f90H2I'\n\nconst mapStyles = {\n  width: '67.2%',\n  height: '97.6%'\n};\n\nconst AnyReactComponent = ({\n  text\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, text);\n\nclass MapContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.showCurrentLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          this.setState(prevState => ({\n            currentLatLng: { ...prevState.currentLatLng,\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            }\n          }));\n        });\n      } else {\n        function showError() {\n          console.log(Error);\n        }\n      }\n    };\n\n    this.displayMarkers = () => {\n      return this.state.stores.map((store, index) => {\n        return React.createElement(Marker, {\n          key: index,\n          id: index,\n          position: {\n            lat: store.latitude,\n            lng: store.longitude\n          },\n          onClick: () => console.log(\"You clicked me!\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.state = {\n      stores: [{\n        lat: 47.9,\n        lng: -122.14\n      }]\n    };\n  }\n\n  // if (navigator.geolocation) {\n  //     navigator.geolocation.getCurrentPosition(function(position)) {\n  //       this.props.center: {\n  //           lat: position.coords.latitude,\n  //           lng: position.coords.longitude\n  //         }\n  //       }\n  //     }\n  // } else {\n  //     navigator.geolocation.getCurrentPosition(success, error);\n  // }\n  render() {\n    return (// you must set the container height explicitly\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Map, {\n        google: this.props.google,\n        initialCenter: this.props.center,\n        style: mapStyles,\n        zoom: this.props.zoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Marker, {\n        lat: 43.07,\n        lng: -89.41,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), this.displayMarkers()))\n    );\n  }\n\n}\n\nMapContainer.defaultProps = {\n  center: {\n    lat: 43.077783,\n    lng: -89.411236\n  },\n  zoom: 13\n};\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyC-FNgVzK38CFoYC6E4-olIUu418f90H2I'\n})(MapContainer);","map":{"version":3,"sources":["/Users/arielrezin/CSprojects/reactAPIproject/src/Map.js"],"names":["React","Component","Map","GoogleApiWrapper","Marker","geolocated","mapStyles","width","height","AnyReactComponent","text","MapContainer","constructor","props","showCurrentLocation","navigator","geolocation","getCurrentPosition","position","setState","prevState","currentLatLng","lat","coords","latitude","lng","longitude","showError","console","log","Error","displayMarkers","state","stores","map","store","index","render","google","center","zoom","defaultProps","apiKey"],"mappings":"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","sourcesContent":["//map layout\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\nimport { geolocated } from \"react-geolocated\";\nimport './index.css';\n// my key 'AIzaSyC-FNgVzK38CFoYC6E4-olIUu418f90H2I'\n\nconst mapStyles = {\n  width: '67.2%',\n  height: '97.6%'\n};\n\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\n\nclass MapContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      stores: [{lat: 47.9, lng: -122.14}]\n    }\n  }\n\n  showCurrentLocation = () => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(\n      position => {\n        this.setState(prevState => ({\n          currentLatLng: {\n            ...prevState.currentLatLng,\n            lat: position.coords.latitude,\n            lng: position.coords.longitude\n          }\n        }))\n      }\n    )\n  } else {\n    function showError(){console.log(Error)}\n  }\n}\n\n  displayMarkers = () => {\n    return this.state.stores.map((store, index) => {\n      return <Marker key={index} id={index} position={{\n       lat: store.latitude,\n       lng: store.longitude\n     }}\n     onClick={() => console.log(\"You clicked me!\")} />\n    })\n  }\n\n  static defaultProps = {\n    center: {\n      lat: 43.077783,\n      lng: -89.411236\n    },\n    zoom: 13\n  };\n\n\n  // if (navigator.geolocation) {\n  //     navigator.geolocation.getCurrentPosition(function(position)) {\n  //       this.props.center: {\n  //           lat: position.coords.latitude,\n  //           lng: position.coords.longitude\n  //         }\n  //       }\n  //     }\n  // } else {\n  //     navigator.geolocation.getCurrentPosition(success, error);\n  // }\n\n\n\n\n  render() {\n    return (\n      // you must set the container height explicitly\n      <div>\n        <Map\n          google={this.props.google}\n          initialCenter={this.props.center}\n          style={mapStyles}\n          zoom={this.props.zoom}\n        >\n          <Marker\n            lat={43.07}\n            lng={-89.41}\n          />\n          {this.displayMarkers()}\n        </Map>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyC-FNgVzK38CFoYC6E4-olIUu418f90H2I'\n})(MapContainer);\n"]},"metadata":{},"sourceType":"module"}